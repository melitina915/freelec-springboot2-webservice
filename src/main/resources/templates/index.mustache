<!--
<!doctype html>
<html>

<head>
    <title>스프링 부트 웹서비스</title>

    <meta charset="UTF-8">
    <meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
</head>

<body>
    <h1>스프링 부트로 시작하는 웹 서비스</h1>
</body>

</html>
-->



{{>layout/header}}
<!--
현재 머스테치 파일(index.mustache)을 기준으로 다른 파일을 가져온다.
-->



<!--
이제 index.mustache에는 필요한 코드만 남게 된다.
-->
<!--
<h1>스프링 부트로 시작하는 웹 서비스</h1>
<div class="col-md-12">
    <div class="row">
        <div class="col-md-6">
        -->
            <!--
            레이아웃으로 파일을 분리했으니 index.mustache에 글 등록 버튼을 하나 추가해 본다.
            -->
<!--
            <a href="/posts/save" role="button" class="btn btn-primary">글 등록</a>
            -->
            <!--
            여기서는 <a> 태그를 이용해 글 등록 페이지로 이동하는 글 등록 버튼이 생성되었다.
            이동할 페이지의 주소는 /posts/save이다.
            -->
<!--
        </div>
    </div>
</div>
-->



<!--
전체 조회 화면 만들기
머스테치의 문법이 처음으로 사용된다.
-->
<h1>스프링 부트로 시작하는 웹 서비스</h1>
<div class="col-md-12">
    <div class="row">
        <div class="col-md-6">
            <a href="/posts/save" role="button" class="btn btn-primary">글 등록</a>
        </div>
    </div>
    <!-- 목록 출력 영역 -->
    <table class="table table-horizontal table-bordered">
        <thead class="thead-strong">
        <tr>
            <th>게시글번호</th>
            <th>제목</th>
            <th>작성자</th>
            <th>최종수정일</th>
        </tr>
        </thead>
        <tbody id="tbody">
        {{#posts}}
        <!--
        - posts라는 List를 순회한다.
        - Java의 for문과 동일하게 생각하면 된다.
        -->
            <tr>
                <td>{{id}}</td>
                <td><a href="/posts/update/{{id}}">{{title}}</a></td>
                <!--
                - 타이틀(title)에 a tag를 추가한다.
                - 타이틀을 클릭하면 해당 게시글의 수정 화면으로 이동한다.
                -->
                <td>{{author}}</td>
                <td>{{modifiedDate}}</td>
                <!--
                - List에서 뽑아낸 객체의 필드를 사용한다.
                -->
            </tr>
        {{/posts}}
        </tbody>
    </table>
</div>



<!--
스프링 시큐리티가 잘 적용되었는지 확인하기 위해 화면에 로그인 버튼을 추가해 본다.
index.mustache에 로그인 버튼과 로그인 성공 시 사용자 이름을 보여주는 코드이다.
-->
<h1>스프링 부트로 시작하는 웹 서비스 Ver.2</h1>
<div class="col-md-12">
    <!-- 로그인 기능 영역 -->
    <div class="row">
        <div class="col-md-6">
            <a href="/posts/save" role="button" class="btn btn-primary">글 등록</a>
            {{#userName}}
            <!--
            - 머스테치는 다른 언어와 같은 if문(if userName != null 등)을 제공하지 않는다.
            - true/false 여부만 판단할 뿐이다.
            - 그래서 머스테치에서는 항상 최종값을 넘겨줘야 한다.
            - 여기서도 역시 userName이 있다면 userName을 노출시키도록 구성한다.
            -->
                Logged in as: <span id="user">{{userName}}</span>
                <a href="/logout" class="btn btn-info active" role="button">Logout</a>
                <!--
                a href="/logout"
                - 스프링 시큐리티에서 기본적으로 제공하는 로그아웃 URL이다.
                - 즉, 개발자가 별도로 저 URL에 해당하는 컨트롤러를 만들 필요가 없다.
                - SecurityConfig 클래스에서 URL을 변경할 순 있지만 기본 URL을 사용해도 충분하니 여기서는 그대로 사용한다.
                -->
            {{/userName}}
            {{^userName}}
            <!--
            - 머스테치에서 해당 값이 존재하지 않는 경우에는 ^ 를 사용한다.
            - 여기서는 userName이 없다면 로그인 버튼을 노출시키도록 구성했다.
            -->
                <a href="/oauth2/authorization/google" class="btn btn-success active" role="button">Google Login</a>
                <!--
                a href="/oauth2/authorization/google"
                - 스프링 시큐리티에서 기본적으로 제공하는 로그인 URL이다.
                - 로그아웃 URL과 마찬가지로 개발자가 별도의 컨트롤러를 생성할 필요가 없다.
                -->

                <a href="/oauth2/authorization/naver" class="btn btn-secondary active" role="button">Naver Login</a>
                <!--
                /oauth2/authorization/naver
                - 네이버 로그인 URL은 application-oauth.properties에 등록한 redirect-uri 값에 맞춰 자동으로 등록된다.
                - /oauth2/authorization/ 까지는 고정이고 마지막 Path만 각 소셜 로그인 코드를 사용하면 된다.
                - 여기서는 naver가 마지막 Path가 된다.
                -->
            {{/userName}}
        </div>
    </div>

    <br>

    <!-- 목록 출력 영역 -->
    <table class="table table-horizontal table-bordered">
        <thead class="thead-strong">
        <tr>
            <th>게시글번호</th>
            <th>제목</th>
            <th>작성자</th>
            <th>최종수정일</th>
        </tr>
        </thead>
        <tbody id="tbody">
        {{#posts}}
            <!--
            - posts라는 List를 순회한다.
            - Java의 for문과 동일하게 생각하면 된다.
            -->
            <tr>
                <td>{{id}}</td>
                <td><a href="/posts/update/{{id}}">{{title}}</a></td>
                <!--
                - 타이틀(title)에 a tag를 추가한다.
                - 타이틀을 클릭하면 해당 게시글의 수정 화면으로 이동한다.
                -->
                <td>{{author}}</td>
                <td>{{modifiedDate}}</td>
                <!--
                - List에서 뽑아낸 객체의 필드를 사용한다.
                -->
            </tr>
        {{/posts}}
        </tbody>
    </table>
</div>



{{>layout/footer}}